type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'

        compileOnly 'org.projectlombok:lombok:1.18.24'
        annotationProcessor 'org.projectlombok:lombok:1.18.24'

        testCompileOnly 'org.projectlombok:lombok:1.18.24'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.property-naming-strategy=SNAKE_CASE
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            HttpResponse response = post("/stats", "").send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_PASSWORD_MESSAGE)
                    .anyOtherValues()
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = post("/stats", requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                    .value("current_income", currentIncome)
                    .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", token
                ))
            ).send();

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 7)
                            .value("column", 4)
                            .value("price", 8)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseAnotherTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "7",
                    "column", "4"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 7)
                                .value("column", 4)
                                .value("price", 8)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket,
            this::testStatsEndpoint,
            () -> testStats(1, 10, 80),
            this::testPurchaseAnotherTicket,
            () -> testStats(2, 18, 79),
            this::returnTicket,
            () -> testStats(1, 10, 80),
        };
    }
  learner_created: false
- name: src/cinema/controller/CinemaController.java
  visible: true
  text: |-
    package cinema;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;

    import java.util.List;
    import java.util.Map;
    import java.util.Objects;
    import java.util.Optional;

    @RestController
    public class MyController {

        private final Cinema cinema;
        private final Statistic statistic;

        @Autowired
        public MyController(Cinema cinema, Statistic statistic) {
            this.cinema = cinema;
            this.statistic = statistic;
        }

        @GetMapping("/seats")
        public ResponseEntity<Cinema> getCinema() {
            return new ResponseEntity<>(cinema, HttpStatus.OK);
        }

        @PostMapping("/purchase")
        public ResponseEntity<?> buySeat(@RequestBody Ticket ticket) {
            List<Seat> list = cinema.getFull();
            Optional<Seat> seat1 = list.stream()
                    .filter((seat2 -> seat2.getTicket().getRow()
                            .equals(ticket.getRow()) && seat2.getTicket().getColumn().equals(ticket.getColumn())))
                    .findAny();
            if (!seat1.isPresent()) {
                throw new MyException("The number of a row or a column is out of bounds!");
            } else if (seat1.get().getTicket().isBought() == true) {
                throw new MyException("The ticket has been already purchased!");
            }
            seat1.get().getTicket().setBought(true);
            statistic.addNewTicket(seat1.get());
            return new ResponseEntity<>(seat1, HttpStatus.OK);

        }

        @PostMapping("/return")
        public ResponseEntity<?> returnTicket(@RequestBody Seat seat) {
            Optional<Seat> seat1 = cinema.getFull().stream()
                    .filter((seat2 -> seat2.getToken().toString().equals(seat.getToken().toString()))).findAny();
            if (!seat1.isPresent()) {
                throw new MyException("Wrong token!");
            }
            seat1.get().getTicket().setBought(false);
            statistic.returnTicket(seat1.get());
            return new ResponseEntity<>(Map.of("returned_ticket", seat1.get().getTicket()), HttpStatus.OK);
        }

        @PostMapping("/stats")
        public ResponseEntity<?> getStats(@RequestParam(value = "password", required = false) String key) {
            if (Objects.isNull(key) || !key.equals("super_secret")) {
                throw new AuthException("The password is wrong!");
            }
            return new ResponseEntity<>(statistic, HttpStatus.OK);
        }
    }
  learner_created: true
- name: src/cinema/exception/AuthException.java
  visible: true
  text: |
    package cinema;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(HttpStatus.UNAUTHORIZED)
    public class AuthException extends RuntimeException {
        public AuthException() {
        }

        public AuthException(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/cinema/exception/CinemaException.java
  visible: true
  text: |
    package cinema;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(HttpStatus.BAD_REQUEST)
    class MyException extends RuntimeException{
        public MyException(String message) {
            super(message);
        }

        public MyException() {
        }
    }
  learner_created: true
- name: src/cinema/exception/ExceptionController.java
  visible: true
  text: |-
    package cinema;

    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.ControllerAdvice;
    import org.springframework.web.bind.annotation.ExceptionHandler;

    @ControllerAdvice
    public class AwesomeControllerHandler {
        @ExceptionHandler(MyException.class)
        protected ResponseEntity<AwesomeException> handleThereIsNoSuchUserException(MyException e) {
            return new ResponseEntity<>(new AwesomeException(e.getMessage()), HttpStatus.BAD_REQUEST);
        }
        @ExceptionHandler(AuthException.class)
        protected ResponseEntity<AwesomeException> handleAu(AuthException e) {
            return new ResponseEntity<>(new AwesomeException(e.getMessage()), HttpStatus.UNAUTHORIZED);
        }


        private static class AwesomeException {
            private String error;

            public AwesomeException() {
            }

            public AwesomeException(String error) {
                this.error = error;
            }

            public String getError() {
                return error;
            }

            public void setError(String error) {
                this.error = error;
            }
        }
    }
  learner_created: true
- name: src/cinema/model/Seat.java
  visible: true
  text: |
    package cinema;

    import java.util.Objects;
    import java.util.UUID;

    public class Seat {
        private UUID token;
        private Ticket ticket;

        public Seat() {
        }

        public Seat(UUID token, Ticket ticket) {
            this.token = token;
            this.ticket = ticket;
        }

        public UUID getToken() {
            return token;
        }

        public void setToken(UUID token) {
            this.token = token;
        }

        public Ticket getTicket() {
            return ticket;
        }

        public void setTicket(Ticket ticket) {
            this.ticket = ticket;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Seat seat = (Seat) o;
            return Objects.equals(token, seat.token) && Objects.equals(ticket, seat.ticket);
        }

        @Override
        public int hashCode() {
            return Objects.hash(token, ticket);
        }

        @Override
        public String toString() {
            return "Seat{" +
                    "token=" + token +
                    ", ticket=" + ticket +
                    '}';
        }
    }
  learner_created: true
- name: src/cinema/model/Statistic.java
  visible: true
  text: |
    package cinema;

    public class Statistic {
        private Long current_income;
        private Long number_of_available_seats;
        private Long number_of_purchased_tickets;

        public Statistic() {
            this.current_income=0L;
            this.number_of_available_seats=81L;
            this.number_of_purchased_tickets=0L;
        }
        public void addNewTicket(Seat seat){
            this.setCurrent_income(this.getCurrent_income()+seat.getTicket().getPrice());
            this.setNumber_of_available_seats(this.getNumber_of_available_seats()-1);
            this.setNumber_of_purchased_tickets(this.getNumber_of_purchased_tickets()+1);
        }
        public void returnTicket(Seat seat){
            this.setCurrent_income(this.getCurrent_income()-seat.getTicket().getPrice());
            this.setNumber_of_available_seats(this.getNumber_of_available_seats()+1);
            this.setNumber_of_purchased_tickets(this.getNumber_of_purchased_tickets()-1);
        }

        public Long getCurrent_income() {
            return current_income;
        }

        public void setCurrent_income(Long current_income) {
            this.current_income = current_income;
        }

        public Long getNumber_of_available_seats() {
            return number_of_available_seats;
        }

        public void setNumber_of_available_seats(Long number_of_available_seats) {
            this.number_of_available_seats = number_of_available_seats;
        }

        public Long getNumber_of_purchased_tickets() {
            return number_of_purchased_tickets;
        }

        public void setNumber_of_purchased_tickets(Long number_of_purchased_tickets) {
            this.number_of_purchased_tickets = number_of_purchased_tickets;
        }

        @Override
        public String toString() {
            return "Statistic{" +
                    "current_income=" + current_income +
                    ", number_of_available_seats=" + number_of_available_seats +
                    ", number_of_purchased_tickets=" + number_of_purchased_tickets +
                    '}';
        }
    }
  learner_created: true
- name: src/cinema/model/Ticket.java
  visible: true
  text: |-
    package cinema;

    import com.fasterxml.jackson.annotation.JsonIgnore;

    import java.util.Objects;

    public class Ticket {
        private Integer row;
        private Integer column;
        private Integer price;
        private boolean isBought;

        public Ticket() {
        }

        public Ticket(Integer row, Integer column, Integer price) {
            this.row = row;
            this.column = column;
            this.price = price;
        }
        @JsonIgnore
        public boolean isBought() {
            return isBought;
        }

        public void setBought(boolean bought) {
            isBought = bought;
        }

        public Integer getPrice() {
            return price;
        }

        public void setPrice(Integer price) {
            this.price = price;
        }

        public Integer getRow() {
            return row;
        }

        public void setRow(Integer row) {
            this.row = row;
        }

        public Integer getColumn() {
            return column;
        }

        public void setColumn(Integer column) {
            this.column = column;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Ticket ticket = (Ticket) o;
            return isBought == ticket.isBought && Objects.equals(row, ticket.row) && Objects.equals(column, ticket.column) && Objects.equals(price, ticket.price);
        }

        @Override
        public int hashCode() {
            return Objects.hash(row, column, price, isBought);
        }

        @Override
        public String toString() {
            return "Ticket{" +
                    "row=" + row +
                    ", column=" + column +
                    ", price=" + price +
                    ", isBought=" + isBought +
                    '}';
        }
    }
  learner_created: true
- name: src/cinema/config/CinemaConfig.java
  visible: true
  text: |
    package cinema;

    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;

    @Configuration
    public class MyConfiguration {
        @Bean
        public Cinema cinema(){
            return new Cinema();
        }
        @Bean
        public MyException myException(){
            return new MyException();
        }
        @Bean
        public Statistic statistic(){
            return new Statistic();
        }
    }
  learner_created: true
- name: src/cinema/model/Cinema.java
  visible: true
  text: |-
    package cinema;

    import com.fasterxml.jackson.annotation.JsonIgnore;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.UUID;

    public class Cinema {
        private Integer total_rows;
        private Integer total_columns;
        private List<Seat> full;
        private List<Ticket> available_seats;

        public Cinema() {
            this.total_rows = 9;
            this.total_columns = 9;
            this.full = new ArrayList<>();
            for (int i = 0; i < total_rows; i++) {
                int price = i <= 4 ? 10 : 8;
                for (int j = 0; j < total_columns; j++) {
                    full.add(new Seat(UUID.randomUUID(), new Ticket(i + 1, j + 1, price)));
                }
            }
            this.available_seats = new ArrayList<>();
            full.stream().forEach(o -> available_seats.add(o.getTicket()));
        }

        public Integer getTotal_rows() {
            return total_rows;
        }

        public void setTotal_rows(Integer total_rows) {
            this.total_rows = total_rows;
        }

        public Integer getTotal_columns() {
            return total_columns;
        }

        public void setTotal_columns(Integer total_columns) {
            this.total_columns = total_columns;
        }

        @JsonIgnore
        public List<Seat> getFull() {
            return full;
        }


        public void setFull(List<Seat> full) {
            this.full = full;
        }

        public List<Ticket> getAvailable_seats() {
            return available_seats;
        }

        public void setAvailable_seats(List<Ticket> available_seats) {
            this.available_seats = available_seats;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13378#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Thu, 28 Jul 2022 11:40:30 UTC
record: -1
