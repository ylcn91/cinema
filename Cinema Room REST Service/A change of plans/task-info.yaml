type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'

        compileOnly 'org.projectlombok:lombok:1.18.24'
        annotationProcessor 'org.projectlombok:lombok:1.18.24'

        testCompileOnly 'org.projectlombok:lombok:1.18.24'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.property-naming-strategy=SNAKE_CASE
  learner_created: false
- name: src/cinema/controllers/SeatsController.java
  visible: true
  text: |
    package cinema.controllers;


    import cinema.models.AvailableSeats;
    import cinema.models.SeatEntity;


    import cinema.models.dto.PurchaseDTO;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.validation.annotation.Validated;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RestController;

    import java.util.*;


    @RestController
    public class SeatsController {
        /*
        @Autowired
        SeatsRepository seatsRepository;
         */

        private List<AvailableSeats> seatEntities = new SeatEntity().getAvailableSeats();
        private Set<AvailableSeats> soldSeats = new HashSet<>();


        @GetMapping(value = "/seats")
        public ResponseEntity<?> seats() {
            return new ResponseEntity<>(new SeatEntity(), HttpStatus.OK);
        }


        //Implement the /purchase endpoint that handles POST requests and marks a booked ticket as purchased.
        @PostMapping(value = "/purchase")
        public ResponseEntity<?> purchase(@RequestBody AvailableSeats availableSeats) {
            //System.out.println(availableSeats.toString());
            //System.out.println(purchaseDTO
            System.out.println(availableSeats.toString());

            ResponseEntity<?> BAD_REQUEST = getStringResponseEntity(availableSeats);
            if (BAD_REQUEST != null) return BAD_REQUEST;

            //seatEntities.add(availableSeats);
            if(soldSeats.contains(availableSeats)) {
                return new ResponseEntity<>(Map.of("error", "The ticket has been already purchased!"), HttpStatus.BAD_REQUEST);
            }
            soldSeats.add(availableSeats);
            seatEntities.remove(availableSeats);


            return new ResponseEntity<>(availableSeats, HttpStatus.OK);


        }

        private ResponseEntity<?> getStringResponseEntity(AvailableSeats availableSeats) {
            if(availableSeats.getRow() > 9 || availableSeats.getColumn() > 9 || availableSeats.getRow() < 1 || availableSeats.getColumn() < 1) {
                return new ResponseEntity<>(Map.of("error","The number of a row or a column is out of bounds!"), HttpStatus.BAD_REQUEST);
            }
            if(availableSeats.getRow() > 4) {
                availableSeats.setPrice(8); //set the price of a ticket to 8 if the row is greater than 4
              }else {
                availableSeats.setPrice(10); //set the price of a ticket to 10 if the row is less than or equal to 4
              }
            return null;
        }

    }
  learner_created: false
- name: src/cinema/models/AvailableSeats.java
  visible: true
  text: |
    package cinema.models;

    import lombok.*;

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    public class AvailableSeats {
        private int row;
        private int column;
        private int price;


    }
  learner_created: false
- name: src/cinema/models/SeatEntity.java
  visible: true
  text: |
    package cinema.models;

    import lombok.Data;

    import java.util.ArrayList;
    import java.util.List;

    @Data
    public class SeatEntity {

        private int totalRows = 9;
        private int totalColumns = 9;

        private List<AvailableSeats> availableSeats = new ArrayList<>();


        public SeatEntity() {
            initializeSeats();
        }

        private void initializeSeats() {
            int price = 0;
            for (int row = 1; row <= totalRows; row++) {
                for (int column = 1; column <= 9; column++) {
                    if(row <=4) {
                        price=10;
                    }else {price=8;}
                    availableSeats.add(new AvailableSeats(row, column,price));
                }
            }
        }
    }
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";

        private static final Gson gson = new Gson();

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket
        };
    }
  learner_created: false
- name: src/cinema/models/dto/PurchaseDTO.java
  visible: true
  text: |
    package cinema.models.dto;

    import lombok.Data;

    @Data
    public class PurchaseDTO {
        private int row;
        private int column;
        private int price;
    }
  learner_created: false
- name: src/cinema/AuthException.java
  visible: true
  learner_created: true
- name: src/cinema/AwesomeControllerHandler.java
  visible: true
  learner_created: true
- name: src/cinema/CinemaException.java
  visible: true
  learner_created: true
- name: src/cinema/Cinema.java
  visible: true
  learner_created: true
- name: src/cinema/MyConfiguration.java
  visible: true
  learner_created: true
- name: src/cinema/Statistic.java
  visible: true
  learner_created: true
- name: src/cinema/Ticket.java
  visible: true
  learner_created: true
- name: src/cinema/Seat.java
  visible: true
  learner_created: true
- name: src/cinema/MyController.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13377#comment
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 28 Jul 2022 11:37:53 UTC
record: 3
